name: Build & Release Tailscale ACAP

on:
  workflow_dispatch:

# Global environment variables available to all jobs
env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  SDK_VERSION: "1.15" # Default SDK version used by build.sh

jobs:
  # ---------------------------------------------------------------------------
  # 1) Figure out which variants (if any) actually need to be built.
  # ---------------------------------------------------------------------------
  determine-builds:
    runs-on: ubuntu-latest

    outputs:
      tag: ${{ steps.tailscale.outputs.tag }}
      release_exists: ${{ steps.check.outputs.release_exists }}
      needs_build: ${{ steps.check.outputs.needs_build }}
      matrix: ${{ steps.check.outputs.build_matrix }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Fetch latest Tailscale release tag
        id: tailscale
        run: |
          LATEST_TAG=$(curl -s https://api.github.com/repos/tailscale/tailscale/releases/latest | jq -r .tag_name)
          echo "tag=$LATEST_TAG" >> "$GITHUB_OUTPUT"

      - name: Determine which variants require building
        id: check
        run: |
          set -euo pipefail
          TAG="${{ steps.tailscale.outputs.tag }}"
          SDK_VER="${{ env.SDK_VERSION }}"

          # Ensure jq present (ubuntu-latest generally has it, but install if not)
          if ! command -v jq &> /dev/null; then
            echo "jq not found, installing..."
            sudo apt-get update -y && sudo apt-get install -y jq
          fi

          echo "Checking existing release assets for tag: $TAG"
          EXISTING_ASSETS=$(gh release view "$TAG" --json assets --jq '.assets[].name' 2>/dev/null || echo "")

          # Flag whether release exists
          if gh release view "$TAG" &> /dev/null; then
            echo "release_exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "release_exists=false" >> "$GITHUB_OUTPUT"
          fi

          # Variant definitions ------------------------------------------------
          # key -> "arch=<val> user_arg='<val>' arch_tag=<val> user_suffix='<val>'"
          declare -A VARIANTS=(
            ["arm-root"]="arch=arm user_arg='-u root' arch_tag=armv7hf user_suffix='-root'"
            ["arm-nouser"]="arch=arm user_arg=''        arch_tag=armv7hf user_suffix=''"
            ["aarch64-root"]="arch=aarch64 user_arg='-u root' arch_tag=aarch64 user_suffix='-root'"
            ["aarch64-nouser"]="arch=aarch64 user_arg=''        arch_tag=aarch64 user_suffix=''"
          )

          BUILD_MATRIX_JSON='[]'
          NEEDS_BUILD="false"

          for key in "${!VARIANTS[@]}"; do
            eval ${VARIANTS[$key]}  # populates $arch, $user_arg, $arch_tag, $user_suffix
            EXPECTED_FILE="tailscale-${TAG}-${arch_tag}${user_suffix}-sdk${SDK_VER}.eap"

            if ! grep -qw "$EXPECTED_FILE" <<< "$EXISTING_ASSETS"; then
              echo "Missing artifact: $EXPECTED_FILE — will build."
              NEEDS_BUILD="true"
              # Materialize JSON object for matrix include
              CONFIG=$(jq -n \
                --arg arch "$arch" \
                --arg user_arg "$user_arg" \
                --arg arch_tag "$arch_tag" \
                --arg user_suffix "$user_suffix" \
                '{arch:$arch, user_arg:$user_arg, arch_tag:$arch_tag, user_suffix:$user_suffix}')
              BUILD_MATRIX_JSON=$(echo "$BUILD_MATRIX_JSON" | jq --argjson cfg "$CONFIG" '. + [$cfg]')
            else
              echo "Already present: $EXPECTED_FILE — skipping build."
            fi
          done

          echo "needs_build=$NEEDS_BUILD" >> "$GITHUB_OUTPUT"
          echo "build_matrix=$BUILD_MATRIX_JSON" >> "$GITHUB_OUTPUT"

      - name: Show computed build matrix
        if: steps.check.outputs.needs_build == 'true'
        run: echo "${{ steps.check.outputs.build_matrix }}"

  # ---------------------------------------------------------------------------
  # 2) Build each missing variant in parallel via the matrix strategy.
  # ---------------------------------------------------------------------------
  build:
    needs: determine-builds
    if: needs.determine-builds.outputs.needs_build == 'true'
    runs-on: ubuntu-latest

    strategy:
      matrix: ${{ fromJSON(needs.determine-builds.outputs.matrix) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx (improves caching)
        uses: docker/setup-buildx-action@v3

      - name: Build variant
        run: |
          set -euo pipefail
          TAG="${{ needs.determine-builds.outputs.tag }}"
          SDK_VER="${{ env.SDK_VERSION }}"

          USER_ARG="${{ matrix.user_arg }}"  # already includes "-u root" or is empty

          echo "Building: arch=${{ matrix.arch }} user_arg='$USER_ARG' tag=$TAG sdk=$SDK_VER"
          ./build.sh -a "${{ matrix.arch }}" $USER_ARG -T "$TAG" -s "$SDK_VER"

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: tailscale-${{ needs.determine-builds.outputs.tag }}-${{ matrix.arch_tag }}${{ matrix.user_suffix }}-sdk${{ env.SDK_VERSION }}.eap
          path: |
            *.eap

  # ---------------------------------------------------------------------------
  # 3) Create (or update) the GitHub release and attach the freshly built artifacts.
  # ---------------------------------------------------------------------------
  release:
    needs: [determine-builds, build]
    if: needs.determine-builds.outputs.needs_build == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v3
        with:
          path: dist

      - name: Create or update GitHub release & upload artifacts
        run: |
          set -euo pipefail
          TAG="${{ needs.determine-builds.outputs.tag }}"

          if [[ "${{ needs.determine-builds.outputs.release_exists }}" == "false" ]]; then
            echo "Creating new release $TAG ..."
            gh release create "$TAG" dist/**/*.eap \
              --title "Tailscale ACAP $TAG (SDK ${{ env.SDK_VERSION }})" \
              --notes "Automated release containing root & non-root builds for ARMv7 (armv7hf) and AArch64. SDK Version: ${{ env.SDK_VERSION }}."
          else
            echo "Adding/overwriting assets on existing release $TAG ..."
            gh release upload "$TAG" dist/**/*.eap --clobber 